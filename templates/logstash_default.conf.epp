<% |
    String[1] $root_dir,
| -%>

input {
    relp {
        id => "plain_relp"
        port => "${CF_PORT}"
        type => "syslog"
    }

    # NOTE: LogStash+OpenSSL does not work well with rsyslog+gnutls!
    #
    # relp {
    #     id => "secure_relp"
    #     port => "${CF_SECURE_PORT}"
    #     type => "syslog"
    #     ssl_enable => true
    #     ssl_cacert => "${CF_TLS_CACERT}"
    #     ssl_cert => "${CF_TLS_CERT}"
    #     ssl_key => "${CF_TLS_KEY}"
    #     ssl_verify => true
    # }
}

filter {
    if [type] == "syslog" {
        syslog_pri {
            facility_labels => [
                "kernel",
                "user",
                "mail",
                "daemon",
                "auth",
                "daemon",
                "daemon",
                "news",
                "daemon",
                "cron",
                "authpriv",
                "daemon",
                "daemon",
                "audit",
                "alert",
                "clock",
                "local0",
                "local1",
                "local2",
                "local3",
                "local4",
                "local5",
                "local6",
                "local7"
            ]
            severity_labels => [
                "emerg",
                "alert",
                "crit",
                "error",
                "warn",
                "notice",
                "info",
                "debug"
            ]
            add_field => {
                '[@metadata][index]' => 'log'
            }
            remove_field => [
                "syslog_facility_code"
            ]
        }

        if [syslog_severity_code] <= 3 {
            mutate { add_tag => 'error' }
        }

        grok {
            match => { "message" => "%{SYSLOG5424LINE}" }
            remove_field => [
                "syslog5424_pri",
                "syslog5424_ver"
            ]
        }
        mutate {
            remove_field => [
                "message",
                "type",
                "syslog_severity_code"
            ]
            rename => {
                "syslog_severity" => "severity"
                "syslog_facility" => "facility"
                "syslog5424_msg" => "msg"
                "syslog5424_proc" => "pid"
                "syslog5424_app" => "app"
                "host" => "src"
                "syslog5424_host" => "host"
                #"message" => "orig"
            }
            gsub => [
                # Remove trailing newline
                'msg', '\n$', ''
            ]
        }
        date {
            match => [ "syslog5424_ts", "ISO8601" ]
            remove_field => [ "syslog5424_ts" ]
        }
    }

    #===============

    # Firewall
    #---
    if [app] == 'ulogd' {
        mutate {
            replace => {
                '[@metadata][index]' => 'fw'
            }
            remove_field => [
                'app',
                'pid',
                'severity',
                'facility'
            ]
        }
        kv {
            source => 'msg'
            target => 'kv'
            include_keys => [ 'PROTO', 'DST', 'DPT', 'SRC', 'SPT', 'IN', 'OUT' ]
        }

        if [msg] =~ /^BLACKLIST-/ {
            mutate {
                add_tag => 'blacklist'
                copy    => { 'kv.SRC' => '[@metadata][remoteip]' } 
            }
        } else if [msg] =~ /^IN-/ {
            mutate {
                add_tag => 'input'
                copy    => { 'kv.SRC' => '[@metadata][remoteip]' } 
            }
        } else if [msg] =~ /^OUT-/ {
            mutate {
                add_tag => 'output'
                copy    => { 'kv.DST' => '[@metadata][remoteip]' } 
            }
        } else if [msg] =~ /^PASS-/ {
            mutate {
                add_tag => 'forward'
                copy    => { 'kv.SRC' => '[@metadata][remoteip]' } 
            }
        }

        if [@metadata][remoteip] {
            geoip {
                cache_size => 10000
                fields => [
                    'location',
                    'country_code3',
                    'latitude',
                    'longitude',
                    'timezone'
                ]
                source => '[@metadata][remoteip]'
                target => 'geoip'
                tag_on_failure => [ 'localnet' ]
            }
        }
    }

    # Access logs
    #---
    else if [app] =~ /^access[_-]/ or [msg] =~ /^\[ACCESS\] / {
        grok {
            match => { 'msg' => '^(\[ACCESS\] )?%{NOTSPACE:vhost}:%{NONNEGINT:vport} %{HTTPD_COMBINEDLOG} %{BASE10NUM:duration}' }
            remove_field => [ 'msg' ]
        }

        geoip {
            cache_size => 10000
            fields => [
                'location',
                'country_code3',
                'latitude',
                'longitude',
                'timezone'
            ]
            source => 'clientip'
            target => 'geoip'
            tag_on_failure => [ 'localnet' ]
        }
        mutate {
            remove_field => [
                'pid',
                'timestamp',
                'severity',
                'facility'
            ]
            replace => {
                '[@metadata][index]' => 'access'
            }
            convert => {
                'bytes' => 'integer'
                'duration' => 'float'
                'response' => 'integer'
                'vport' => 'integer'
            }
            gsub => [
                'app', '^access[_-]', '',
                'agent', '"', '',
                'referrer', '"', ''
            ]
        }
        useragent {
            source => 'agent'
            target => 'ua'
        }
    }

    # Ordinary logs
    #---
    else {
        # CFDB stuff
        #---
        if [app] =~ /^cfmysql-.*-arb$/ {
            grok {
                match => { 'msg' => '^%{TIMESTAMP_ISO8601}%{SPACE}(?<new_severity>[A-Z0-9]+):%{SPACE}%{GREEDYDATA:new_msg}' }
            }
            mutate {
                rename => {
                    'new_msg' => 'msg'
                    'new_severity' => 'severity'
                }
                lowercase => [ 'severity' ]
            }
            if [severity] == 'error' {
                mutate { add_tag => 'error'  }
            }
        }

        # Detect warnings and errors
        #---
        if [severity] != 'notice' {
            # pass - others most likely do not come from systemd
        } else if [msg] =~ /(?i)(error|fatal)/ {
            mutate {
                replace => { 'severity' => 'error' }
                add_tag => 'error'
            }
        } else if [msg] =~ /(?i)warn/ {
            mutate {
                replace => { 'severity' => 'warn' }
            }
        }
    }

    #===============

    # Final touches
    #---
    mutate {
        gsub => [
            # MySQL prepends name to tag
            'app', '^mysqld-cfmysql', 'cfmysql',

            # Make sure to combine related
            'app', '^cf([^-]+)-([^-]+)-.*$', 'cf\1-\2',
            'app', '^app-([^-]+).*$', 'app-\1'
        ]
    }
}

output {
    # stdout { codec => rubydebug { metadata => true } }
    if [@metadata][index] == 'fw' {
        elasticsearch {
            id => "fw_sink"
            hosts => "http://${DB_HOST}:${DB_PORT}"
            index => "fw-%{+YYYY.MM.dd}"
            manage_template => true
            template => "<%= $root_dir %>/config/tpl-fw.json"
            template_name => "cflogsink_fw"
            template_overwrite => true
        }
    } else if [@metadata][index] == 'access' {
        elasticsearch {
            id => "access_sink"
            hosts => "http://${DB_HOST}:${DB_PORT}"
            index => "access-%{+YYYY.MM.dd}"
            manage_template => true
            template => "<%= $root_dir %>/config/tpl-access.json"
            template_name => "cflogsink_access"
            template_overwrite => true
        }
    } else if [@metadata][index] == 'log' {
        elasticsearch {
            id => "log_sink"
            hosts => "http://${DB_HOST}:${DB_PORT}"
            index => "log-%{+YYYY.MM.dd}"
            manage_template => true
            template => "<%= $root_dir %>/config/tpl-log.json"
            template_name => "cflogsink_log"
            template_overwrite => true
        }
    } else {
        elasticsearch {
            id => "discard_sink"
            hosts => "http://${DB_HOST}:${DB_PORT}"
            index => "logstash-%{+YYYY.MM.dd}"
            manage_template => true
            template_overwrite => true
        }
    }
}
